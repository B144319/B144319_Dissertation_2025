#Script containing a function which converts FASTA files generated by cotimedutils to YAML. 
import os
import yaml
from collections import defaultdict
from Bio import SeqIO

def fasta_to_boltz_yaml_from_directory(input_root_dir, output_dir, ligand_smiles=None):
    """
    Recursively process FASTA files from input_root_dir and convert to Boltz YAML format.
    Output YAMLs are named like: 2fde_pose1_2_comb_1.yaml
    """
    os.makedirs(output_dir, exist_ok=True)

    class IndentDumper(yaml.SafeDumper):
        def increase_indent(self, flow=False, indentless=False):
            return super().increase_indent(flow, False)

    for root, _, files in os.walk(input_root_dir):
        for file in files:
            if file.endswith(".fasta"):
                fasta_path = os.path.join(root, file)
                print(f"Processing: {fasta_path}")

                # Get combination number (e.g. comb_34)
                comb_suffix = file.replace(".fasta", "")  

                # Get structure ID (e.g. 2fde_pose2_78) from path
                path_parts = os.path.normpath(fasta_path).split(os.sep)
                try:
                    struct_id = path_parts[path_parts.index("predictions") - 1]
                except ValueError:
                    struct_id = "unknown_struct"

                # Parse FASTA and collect chains
                sequences = defaultdict(str)
                for record in SeqIO.parse(fasta_path, "fasta"):
                    header = record.id
                    if "name=chain_" in header:
                        chain_id = header.split("name=chain_")[-1]
                        sequences[chain_id] = str(record.seq)
                    else:
                        print(f" Skipping header: {header}")

                # Create YAML structure
                yaml_data = {
                    "version": 1,
                    "sequences": [
                        {"protein": {"id": chain, "sequence": seq}}
                        for chain, seq in sorted(sequences.items())
                    ]
                }

                if ligand_smiles:
                    yaml_data["sequences"].append({
                        "ligand": {
                            "id": "C",
                            "smiles": ligand_smiles
                        }
                    })

                # Save YAML
                yaml_filename = f"{struct_id}_{comb_suffix}.yaml"
                yaml_path = os.path.join(output_dir, yaml_filename)
                with open(yaml_path, "w") as f:
                    yaml.dump(yaml_data, f, Dumper=IndentDumper, sort_keys=False, indent=2, default_flow_style=False, width=1000)
                    f.write("\n")

    print(f"\n All YAMLs saved to: {output_dir}")



fasta_to_boltz_yaml_from_directory(
    input_root_dir="",
    output_dir="", 
    ligand_smiles='C[C@H]1C/C(=C/C[C@@H](OC(=O)CCC[C@@H]1OC(=O)/C=C/C(=C/C(=C/C=C/C(=C/[C@@H]([C@H](C[C@H](C)O)O)O)/C)/C)/C)[C@@H](C)C/C(=C/[C@@H](C)[C@@H](C[C@@H](C)O)O)/C)/C')